using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Xml.Linq;


namespace Plann.Core
{
    [Serializable]
    public class Soft
    {
<<<<<<< HEAD
        Period _currentPeriod;
        public Soft()
        {
            List<DateTime> listDateTime= new List<DateTime>();
            listDateTime.Add( new DateTime( 2015, 05, 08 ) );
            listDateTime.Add( new DateTime( 2015, 05, 09 ) );
            listDateTime.Add( new DateTime( 2015, 05, 01 ) );
            listDateTime.Add( new DateTime( 2015, 05, 14 ) );
            listDateTime.Add( new DateTime( 2015, 05, 15 ) );
            _currentPeriod = new Period( "2015M", new DateTime( 2015, 03, 10 ), new DateTime( 2015, 07, 10 ), listDateTime );
=======
        List<Room> _listRooms;
        List<Subject> _listSubjects;
        List<Teacher> _listTeachers;
        List<Period> _listPeriods;
        List<Slot> _listSlots;
        List<Promotion> _listPromotion;
        String _currentUcFilter;

        public Soft()
        {
            _listRooms = new List<Room>();
            _listSubjects = new List<Subject>();
            _listTeachers = new List<Teacher>();
            _listPeriods = new List<Period>();
            _listSlots = new List<Slot>();
            _listPromotion = new List<Promotion>();
            
            // Test objects TO REMOVE
            Teacher spi = new Teacher( "Spi", "spi@gmail.com" );
            Subject pi = new Subject("PI",spi,Color.Red);
            Room e5 = new Room( "E01", 40 );
            Promotion iti = new Promotion( "ItiTruc", "iti@intech.fr", 20 );

            addTeacher( spi );
            addSubject( pi );
            addRoom( e5 );
            addPromotion( iti );
        }

        #region Properties

        public List<Teacher> ListTeachers
        {
            get { return _listTeachers; }
        }

        public List<Subject> ListSubjects
        {
            get { return _listSubjects; }
        }

        public List<Room> ListRooms
        {
            get { return _listRooms; }
        }
        public List<Period> ListPeriods
        {
            get { return _listPeriods; }
        }
        public List<Slot> ListSlots
        {
            get { return _listSlots; }
        }
        public List<Promotion> ListPromotion
        {
            get { return _listPromotion; }
        }

        public String CurrentUcFilter
        {
            get { return _currentUcFilter; }
            set { _currentUcFilter = value; }
        }

        #endregion

        public bool addRoom(Room room)
        {
            if( room == null ) throw new ArgumentNullException();
            _listRooms.Add( room );
            return true;
        }
        public bool removeRoom(Room room)
        {
            if( !_listRooms.Contains( room ) ) throw new ArgumentException( "La salle n'est pas dans la liste des salles." );
            _listRooms.Remove( room );
            return true;
        }

        public bool editRoom( Room roomToEdit, Room newRoom )
        {
            if( !_listRooms.Contains( roomToEdit ) ) throw new ArgumentException( "La salle n'est pas dans la liste des salles." );

            int index = _listRooms.FindIndex( r => r == roomToEdit );
            removeRoom( roomToEdit );
            _listRooms.Insert( index, newRoom );
            return true;
        }

        public bool addTeacher( Teacher teacher )
        {
            if( teacher == null ) throw new ArgumentNullException();
            _listTeachers.Add( teacher );
            return true;
        }
        public bool removeTeacher( Teacher teacher )
        {
            if( !_listTeachers.Contains( teacher ) ) throw new ArgumentException( "Le prof n'est pas dans la liste des profs." );
            _listTeachers.Remove( teacher );
            return true;
>>>>>>> origin/dev
        }
        public Period CurrentPeriod
        {
            get { return _currentPeriod; }
        }

    }
}
